// Copyright 2019 ProximaX Limited. All rights reserved.
// Use of this source code is governed by the Apache 2.0
// license that can be found in the LICENSE file

/**
 * Catapult REST API Reference
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.7.15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import http = require('http');
import axios from 'axios';
import {AxiosRequestConfig, AxiosResponse, AxiosError} from 'axios';

/* tslint:disable:no-unused-locals */
import { AddressMetadataInfoDTO } from '../model/addressMetadataInfoDTO';
import { MetadataIds } from '../model/metadataIds';
import { MosaicMetadataInfoDTO } from '../model/mosaicMetadataInfoDTO';
import { NamespaceMetadataInfoDTO } from '../model/namespaceMetadataInfoDTO';

import { ObjectSerializer } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'http://localhost:3000';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum MetadataRoutesApiApiKeys {
}

export class MetadataRoutesApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    /**
     * Gets the metadata for a given accountId.
     * @summary Get metadata of account
     * @param accountId The account identifier.
     */
    public async getAccountMetadata (accountId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: AxiosResponse; body: AddressMetadataInfoDTO;  }> {
        const localVarPath = '/account/{accountId}/metadata_nem'
            .replace('{' + 'accountId' + '}', encodeURIComponent(String(accountId)));

        // verify required parameter 'accountId' is not null or undefined
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling getAccountMetadata.');
        }

        let localVarRequestOptions: AxiosRequestConfig = {
            method: 'GET',
            headers: { 
                'Content-Type': 'application/json', 
                'Accept': 'application/json'
            },
            url: localVarPath,
            baseURL: this.basePath,
            responseType: 'json'
        };

        return new Promise<{ response: AxiosResponse; body: AddressMetadataInfoDTO;  }>((resolve, reject) => {
            axios(localVarRequestOptions).then(
                (response)=>{
                    let body = ObjectSerializer.deserialize(response.data, "AddressMetadataInfoDTO");
                    if (response.status && response.status >= 200 && response.status <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                            reject(response);
                    }
                },
                (error: AxiosError ) => {
                    reject(error);
                }
            );
        });
    }
    /**
     * Gets the metadata(AccountMetadataIndo, MosaicMetadataInfo or NamespaceMetadataInfo) for a given metadataId.
     * @summary Get metadata of namespace/mosaic/account
     * @param metadataId The metadata identifier.
     */
    public async getMetadata (metadataId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: AxiosResponse; body: NamespaceMetadataInfoDTO;  }> {
        const localVarPath = '/metadata_nem/{metadataId}'
            .replace('{' + 'metadataId' + '}', encodeURIComponent(String(metadataId)));

        // verify required parameter 'metadataId' is not null or undefined
        if (metadataId === null || metadataId === undefined) {
            throw new Error('Required parameter metadataId was null or undefined when calling getMetadata.');
        }

        let localVarRequestOptions: AxiosRequestConfig = {
            method: 'GET',
            headers: { 
                'Content-Type': 'application/json', 
                'Accept': 'application/json'
            },
            url: localVarPath,
            baseURL: this.basePath,
            responseType: 'json'
        };

        return new Promise<{ response: AxiosResponse; body: NamespaceMetadataInfoDTO;  }>((resolve, reject) => {
            axios(localVarRequestOptions).then(
                (response)=>{
                    let body = ObjectSerializer.deserialize(response.data, "NamespaceMetadataInfoDTO");
                    if (response.status && response.status >= 200 && response.status <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                            reject(response);
                    }
                },
                (error: AxiosError ) => {
                    reject(error);
                }
            );
        });
    }
    /**
     * Gets an array of metadata.
     * @summary Get metadatas(namespace/mosaic/account) for an array of metadataids
     * @param metadataIds 
     */
    public async getMetadatas (metadataIds?: MetadataIds, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: AxiosResponse; body: Array<AddressMetadataInfoDTO>;  }> {
        const localVarPath = '/metadata_nem';

        let localVarRequestOptions: AxiosRequestConfig = {
            method: 'POST',
            headers: { 
                'Content-Type': 'application/json', 
                'Accept': 'application/json'
            },
            url: localVarPath,
            baseURL: this.basePath,
            responseType: 'json',
            data: ObjectSerializer.serialize(metadataIds, "MetadataIds")
        };

        return new Promise<{ response: AxiosResponse; body: Array<AddressMetadataInfoDTO>;  }>((resolve, reject) => {
            axios(localVarRequestOptions).then(
                (response)=>{
                    let body = ObjectSerializer.deserialize(response.data, "Array<AddressMetadataInfoDTO>");
                    if (response.status && response.status >= 200 && response.status <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                            reject(response);
                    }
                },
                (error: AxiosError ) => {
                    reject(error);
                }
            );
        });
    }
    /**
     * Gets the metadata for a given mosaicId.
     * @summary Get metadata of mosaic
     * @param mosaicId The mosaic identifier.
     */
    public async getMosaicMetadata (mosaicId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: AxiosResponse; body: MosaicMetadataInfoDTO;  }> {
        const localVarPath = '/mosaic/{mosaicId}/metadata_nem'
            .replace('{' + 'mosaicId' + '}', encodeURIComponent(String(mosaicId)));

        // verify required parameter 'mosaicId' is not null or undefined
        if (mosaicId === null || mosaicId === undefined) {
            throw new Error('Required parameter mosaicId was null or undefined when calling getMosaicMetadata.');
        }

        let localVarRequestOptions: AxiosRequestConfig = {
            method: 'GET',
            headers: { 
                'Content-Type': 'application/json', 
                'Accept': 'application/json'
            },
            url: localVarPath,
            baseURL: this.basePath,
            responseType: 'json'
        };

        return new Promise<{ response: AxiosResponse; body: MosaicMetadataInfoDTO;  }>((resolve, reject) => {
            axios(localVarRequestOptions).then(
                (response)=>{
                    let body = ObjectSerializer.deserialize(response.data, "MosaicMetadataInfoDTO");
                    if (response.status && response.status >= 200 && response.status <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                            reject(response);
                    }
                },
                (error: AxiosError ) => {
                    reject(error);
                }
            );
        });
    }
    /**
     * Gets the metadata for a given namespaceId.
     * @summary Get metadata of namespace
     * @param namespaceId The namespace identifier.
     */
    public async getNamespaceMetadata (namespaceId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: AxiosResponse; body: NamespaceMetadataInfoDTO;  }> {
        const localVarPath = '/namespace/{namespaceId}/metadata'
            .replace('{' + 'namespaceId' + '}', encodeURIComponent(String(namespaceId)));

        // verify required parameter 'namespaceId' is not null or undefined
        if (namespaceId === null || namespaceId === undefined) {
            throw new Error('Required parameter namespaceId was null or undefined when calling getNamespaceMetadata.');
        }

        let localVarRequestOptions: AxiosRequestConfig = {
            method: 'GET',
            headers: { 
                'Content-Type': 'application/json', 
                'Accept': 'application/json'
            },
            url: localVarPath,
            baseURL: this.basePath,
            responseType: 'json'
        };

        return new Promise<{ response: AxiosResponse; body: NamespaceMetadataInfoDTO;  }>((resolve, reject) => {
            axios(localVarRequestOptions).then(
                (response)=>{
                    let body = ObjectSerializer.deserialize(response.data, "NamespaceMetadataInfoDTO");
                    if (response.status && response.status >= 200 && response.status <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                            reject(response);
                    }
                },
                (error: AxiosError ) => {
                    reject(error);
                }
            );
        });
    }
}
